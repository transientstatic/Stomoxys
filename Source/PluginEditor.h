/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"


//==============================================================================
/**
*/
class SenselVapbiAudioProcessorEditor  : public AudioProcessorEditor, public Slider::Listener, public ComboBox::Listener,
private Timer
{
public:
    enum {
        kParamControlHeight = 33,
        kParamLabelWidth = 200,
        kParamSliderWidth = 150,
        kConsoleWidth = 300,
        kConsoleHeight = 200,
        kConsoleOffset = 10
    };
    
    SenselVapbiAudioProcessorEditor (SenselVapbiAudioProcessor&);
    ~SenselVapbiAudioProcessorEditor();

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;

    void timerCallback() override;
    
    //==============================================================================
    void sliderValueChanged (Slider* slider) override {
        if (AudioParameterFloat* param = getParameterForSlider (slider))
            *param = (float) slider->getValue();
    }
    
    void sliderDragStarted (Slider* slider) override {
        if (AudioParameterFloat* param = getParameterForSlider (slider))
            param->beginChangeGesture();
    }
    
    void sliderDragEnded (Slider* slider) override {
        if (AudioParameterFloat* param = getParameterForSlider (slider))
            param->endChangeGesture();
        
    }
    
    //==============================================================================

    void comboBoxChanged (ComboBox * comboBoxThatHasChanged) override {
        if (AudioParameterChoice* param = getParameterForCombo(comboBoxThatHasChanged))
            *param = (int) comboBoxThatHasChanged->getSelectedItemIndex();
    }
    
private:
    // This reference is provided as a quick way for your editor to
    // access the processor object that created it.
    SenselVapbiAudioProcessor& processor;
        
    ScopedPointer<TextEditor>   vstDataConsole;
    ScopedPointer<TextEditor>   vstMsgConsole;

//    ScopedPointer<ComboBox> bridgeSel;
//    ScopedPointer<ComboBox> audioDelSel;
    
    //==============================================================================
    
    AudioParameterFloat* getParameterForSlider (Slider* slider) {
        const OwnedArray<AudioProcessorParameter>& params = getAudioProcessor()->getParameters();
        return dynamic_cast<AudioParameterFloat*> (params[paramSliders.indexOf(slider)]);
    }
    
    Label noParameterLabel;
    OwnedArray<Slider> paramSliders;
    OwnedArray<Label> paramLabels;

    //==============================================================================
    
    AudioParameterChoice* getParameterForCombo (ComboBox* combo) {
        const OwnedArray<AudioProcessorParameter>& params = getAudioProcessor()->getParameters();
        return dynamic_cast<AudioParameterChoice*> (params[paramCombos.indexOf(combo)+paramSliders.size()]);
    }
    
    const int numCombos = 5; //right now they don't seem to have an intelligent way of dealing with a combined list of parameters.
    OwnedArray<ComboBox> paramCombos;
    OwnedArray<Label> paramComboLabels;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SenselVapbiAudioProcessorEditor)
};


#endif  // PLUGINEDITOR_H_INCLUDED





